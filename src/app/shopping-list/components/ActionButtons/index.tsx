import { Item } from "@/app/type";
import { Download, Share2 } from "lucide-react";

export default function ActionButtons({
  items,
  completedCount,
  groupedItems,
}: {
  items: Item[];
  completedCount: number;
  groupedItems: { category: string; categoryItems: Item[] };
}) {
  function downloadList() {
    const listData = {
      title: "Shopping List",
      date: new Date().toLocaleDateString(),
      totalItems: items.length,
      completedItems: completedCount,
      categories: Object.entries(groupedItems).map(
        ([category, categoryItems]) => ({
          category,
          items: (categoryItems as Item[]).map((item: Item) => ({
            name: item.name,
            targetQuantity: item.neededQuantity,
            boughtQuantity: item.boughtQuantity,
            completed: item.completed,
          })),
        })
      ),
    };

    const content = `SHOPPING LIST - ${listData.date}
    Progress: ${listData.completedItems}/${listData.totalItems} items completed
    
    ${listData.categories
      .map(
        (cat) =>
          `${cat.category.toUpperCase()}:
    ${cat.items
      .map(
        (item) =>
          `${item.completed ? "✓" : "○"} ${item.name} - ${
            item.boughtQuantity
          }/${item.targetQuantity}`
      )
      .join("\n")}`
      )
      .join("\n\n")}
    
    Generated by Shopping List App`;

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `shopping-list-${new Date().toISOString().split("T")[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  async function shareList() {
    const shareData = {
      title: "My Shopping List",
      text: `Shopping List - ${completedCount}/${items.length} items completed`,
      url: window.location.href,
    };

    if (
      navigator.share &&
      navigator.canShare &&
      navigator.canShare(shareData)
    ) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        // Fallback to copying to clipboard
        fallbackShare();
      }
    } else {
      fallbackShare();
    }
  }

  function fallbackShare() {
    const shareText = `Check out my shopping list: ${window.location.href}`;
    if (navigator.clipboard) {
      navigator.clipboard.writeText(shareText).then(() => {
        alert("Link copied to clipboard!");
      });
    } else {
      // Final fallback
      const textArea = document.createElement("textarea");
      textArea.value = shareText;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);
      alert("Link copied to clipboard!");
    }
  }

  return (
    <div className="flex justify-end gap-2 m-2">
      <button
        onClick={downloadList}
        className=" hover:bg-gray-200 text-black p-3 rounded-lg flex items-center justify-center gap-2 font-medium transition-colors"
      >
        <Download className="w-4 h-4" color="black" />
      </button>
      <button
        onClick={shareList}
        className=" hover:bg-gray-200 text-black p-3 rounded-lg flex items-center justify-center gap-2 font-medium transition-colors"
      >
        <Share2 className="w-4 h-4" color="black" />
      </button>
    </div>
  );
}
